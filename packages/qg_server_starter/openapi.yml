openapi: 3.0.1
info:
  title: Server Starter API
  version: 0.0.1
  description: Server Starter API specification for QuantumGray
  contact:
    name: Niklas von Haxthausen
    url: https://quantumgray.tech
    email: niklas@quantumgray.tech
servers:
- url: https://development.gigantic-server.com/v1
  description: Development server
- url: https://staging.gigantic-server.com/v1
  description: Staging server
- url: https://{username}.gigantic-server.com:{port}/{basePath}
  description: The production API server
  variables:
    username:
      default: demo
      description: this value is assigned by the service provider, in this example `gigantic-server.com`
    port:
      enum:
        - '8443'
        - '443'
      default: '8443'
    basePath:
      default: v2
externalDocs:
  description: GitHub project for the code and information about this API
  url: https://github.com/lornajane/flask-planets-and-webhooks
paths:
  /planets/{planetId}:
    get:
      operationId: onePlanet
      summary: Fetch one planet by position
      description: Get the data relating to one planet
      parameters:
      - name: planetId
        in: path
        required: true
        schema:
          type: number
          example: 4
      responses:
        '200':
          description: Planet as an object
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/PlanetResponse'
  /planets:
    get:
      operationId: onePlanet
      summary: Fetch all planets
      description: Get the data relating to one planet
      parameters:
      - name: radius
        required: true
        in: path
        schema:
          type: number
          minimum: 0
          default: 0
      requestBody:
        description: Optional description in *Markdown*
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlanetRequest'
      responses:
        '200':
          description: List of planets
          content:
            'application/json' :
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlanetResponse'
components:
  schemas:
    Exception:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    PlanetRequest:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    PlanetResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
  parameters:
    skipParam:
      name: skip
      in: query
      description: number of items to skip
      required: true
      schema:
        type: integer
        format: int32
    limitParam:
      name: limit
      in: query
      description: max records to return
      required: true
      schema:
        type: integer
        format: int32
  responses:
    NotFoundException:
      description: Entity not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Exception'
    IllegalInputException:
      description: Illegal input for operation.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Exception'
    UnknownException:
      description: General Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Exception'
  securitySchemes:
    jwt_bearer_auth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    api_key:
      type: apiKey
      name: api_key
      in: header
    planet_oauth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://example.org/api/oauth/dialog
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
